The ``data_model`` module
======================

Let's load the module:


    >>> import biome.api.data_model as m
    
``CreateEdge`` class
------------------- 

1. Let's create an edge

    >>> n1 = m.Gene(start=1, end=10, strand='forward', name='g1')
    >>> n2 = m.Gene(start=10, end=22, strand='forward', name='g2')
    >>> e = m.CreateEdge(n1, n2, label='similar')
    >>> e.source.name
    'g1'

``XRef`` class
-------------------     

1. Let's check that it is impossible to create XRef object without id:

    >>> obj = m.XRef()
    Traceback (most recent call last):
    TypeError: __init__() takes exactly 2 arguments (1 given)
    
2. Let's check that the uid argument is a string.

    >>> id = m.Node()
    >>> obj = m.XRef(id)
    Traceback (most recent call last):
    TypeError: The id argument must be a string!
    
    
``DB`` class
-------------------     

1. Let's check that it is impossible to create XRef object without id:

    >>> obj = m.DB()
    Traceback (most recent call last):
    TypeError: __init__() takes at least 2 arguments (1 given)
    
2. Let's check that the uid argument is a string.

    >>> name = {}
    >>> obj = m.DB(name)
    Traceback (most recent call last):
    TypeError: The name argument must be a string!
    
``BioEntity`` class
-------------------
 
1. Let's check that it is impossible to create BioEntity object without name:

    >>> obj = m.BioEntity()
    Traceback (most recent call last):
    TypeError: __init__() takes exactly 2 arguments (1 given)
    
2. Let's check that the name argument is a string.

    >>> name = 1
    >>> obj = m.BioEntity(name)
    Traceback (most recent call last):
    TypeError: The name argument must be a string!


``Feature`` class
-------------------

1. Let's check that it is impossible to create Feature object without start, end and strand:

    >>> obj = m.Feature()
    Traceback (most recent call last):
    TypeError: __init__() takes exactly 4 arguments (1 given)
    
2. Let's check that all arguments are of proper classes:

    >>> obj = m.Feature(start=20, end=40, strand='forward')

    >>> obj = m.Feature(start='20', end=40, strand='forward')
    Traceback (most recent call last):
    TypeError: The start argument must be an integer!
    
    >>> obj = m.Feature(start=20, end='op', strand='forward')
    Traceback (most recent call last):
    TypeError: The end argument must be an integer!
    
    >>> obj = m.Feature(start=20, end=40, strand=1)
    Traceback (most recent call last):
    TypeError: The strand argument must be a string!

3. Let's check start and end positions values:
    
    >>> obj = m.Feature(start=100, end=40, strand='forward')
    UserWarning: Check start and end positions! The end coordinate is smaller than the start coordinate!
    
    >>> obj = m.Feature(start=-20, end=40, strand='forward')
    metacyc.py:123: UserWarning:Check start and end positions! One of them (or both) has a negative value!
    
    >>> obj = m.Feature(start=-20, end=-40, strand='forward')
    UserWarning: Check start and end positions! One of them (or both) has a negative value!

4. Let's check subclasses method for various objects:

    >>> obj = m.Gene(name='gene', start=1, end=1000, strand='forward')
    >>> obj.subclasses()
    ['Gene', 'BioEntity', 'Feature']
    >>> obj.labels
    ':Gene:BioEntity:Feature'
    >>> obj = m.rRNA(name='rRNA')
    >>> obj.subclasses()
    ['rRNA', 'RNA', 'BioEntity']
    >>> obj = m.Attenuation()
    >>> obj.subclasses()
    ['Attenuation', 'RegulationEvent', 'Binding']
    
``Term`` class
-------------------

1. Incorrect data type for the text argument: 
    >>> genename = 1
    >>> term = m.Term(genename)
    Traceback (most recent call last):
    TypeError: The text argument must be a string!