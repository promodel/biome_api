The ``MetaCyc`` module
======================

Let's load the module:

    >>> from metacyc import *
    
``MetaCyc`` class
-------------------

1. Incorrect data type for the link argument:

    >>> path = 1
    >>> db = MetaCyc(path)
    Traceback (most recent call last):
    TypeError: The path argument must be a string!
    
2.  If the path specified does not exist: 
    
    >>> path = '/banana/boom'
    >>> db = MetaCyc(path)
    Traceback (most recent call last):
    ValueError: The path does not exist!
    
3. Let's check correct representation of MetaCyc class objects:
    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db
    MetaCyc object
    >>> print db
    MetaCyc object
    
4. Let's check the work of the _set_version method

    >>> db.organism == None
    True
    >>> db._set_version()
    Information about version and release has been set!
    >>> db.version != None
    True
    >>> db.orgid != None
    True
    >>> db.organism != None
    True
    >>> db.release != None
    True
    
5. Let's check the work of the genes_col method

    >>> db.genes == []
    True
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes is not None
    True
    
6. Let's check the work of the _location method

    >>> db._location(23, 32)
    [23, 32, 'forward']
    >>> db._location(32, 23)
    [23, 32, 'reverse']
    >>> db._location(23, 23)
    [23, 23, 'unknown']
    
7. Let's check the work of the genes_dat method (upgrade)
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes[1].uid
    'BSU26390'
    >>> db.genes[1].name
    'spoIIIC'
    >>> db.genes_dat() 
    
    >>> len(db.dbs)
    7
    >>> len(db.xrefs)
    13901
    >>> len(db.edges)
    53962
    >>> len(db.terms)
    1898
    
8. Let's check the work of the db_checker method

    >>> db = MetaCyc(path)
    >>> len(db.dbs)
    0
    >>> obj = db.db_checker('op')
    >>> len(db.dbs)
    1
    
9. Let's check the work of the gene_links method:
    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.gene_links()
    Traceback (most recent call last):
    TypeError: There is no information about genes in the database! Call genes_col or genes_dat method first!
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> len(db.edges)
    53962
    >>> len(db.dbs)
    7
    >>> db.gene_links()
    >>> len(db.edges)
    62316
    >>> len(db.dbs)
    8
    
10. Let's check work of the rnas_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> db.rnas_dat()
    A list with 180 RNAs has been created!
    No genes in the database for 0 RNAs.
    >>> len(db.rnas)
    180
    >>> len(db.other_nodes)
    86
    >>> len(db.edges)
    54354
    >>> db.rnas[-1].name
    'ribosomal RNA-5S'
    
11. Let's check work of the terminators_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.terminators_dat()
    A list with 1144 terminators has been created!
    >>> db.terminators[0].__dict__
    {'start': 4173606, 'end': 4173631, 'uid': 'TERM8J2-980', 'strand': 'unknown'}
    >>> db.terminators[-1].start
    3901843
    
12. Let's check work of the promoters_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.promoters_dat()
    A list with 605 promoters has been created!
    There were 565 unmapped elements, they were skipped...
    >>> db.promoters[0].__dict__
    {'start': 4173606, 'labels': 'Terminator; Feature; Node', 'end': 4173631, 'uid': 'TERM8J2-980', 'strand': 'unknown'}
    >>> db.promoters[-1].tss
    3658936
    
13. Let's check work of the dnabindsites_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.dnabindsites_dat()
    A list with 522 BSs has been created!
    There were 232 unmapped BSs, they were skipped...
    >>> db.BSs[-1].uid
    'BS8J2-468'

14. Let's check work of the transunits_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> db.terminators_dat()
    A list with 1144 terminators has been created!
    >>> db.promoters_dat()
    A list with 605 promoters has been created!
    There were 565 unmapped elements, they were skipped...
    >>> db.dnabindsites_dat()
    A list with 522 BSs has been created!
    There were 232 unmapped BSs, they were skipped...
    >>> db.promoters[-1].strand
    'unknown'
    >>> db.promoters[-1].seq

    >>> db.terminators[-1].strand
    'unknown'
    >>> len(db.edges)
    53962
    >>> db.transunits_dat()
    A list with 1584 transcription units has been created!
    There were 427 incomplete transcription units...
    No information about 0 transcription units.
    >>> db.promoters[-1].strand
    'reverse'
    >>> len(db.promoters[-1].seq)
    75
    >>> db.terminators[-1].strand
    'reverse'
    >>> len(db.edges)
    59247
    >>> db.TUs[-1].uid
    'TU8J2-1268'
    >>> db.TUs[-1].name    
    'proBA'
    
15. Let's check the work of the compounds_dat method:

    >>> db.compounds_dat()
    A list with 901 compounds has been created!
    >>> db.compounds[-1].name
    'pyridoxal'
    >>> "CU+2" in [i.uid for i in db.compounds]
    True
    >>> "ZN+2" in [i.uid for i in db.compounds]
    True
    >>> "PRO" in [i.uid for i in db.compounds]
    True
    >>> len(db.compounds)
    901
    
16. Let's try the proteins_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> len(db.other_nodes)
    0
    >>> db.rnas_dat()
    A list with 180 RNAs has been created!
    No genes in the database for 0 RNAs.
    >>> db.compounds_dat()
    A list with 901 compounds has been created!
    >>> db.proteins_dat()
    The complex with CPLX8J2-99 is assigned before its components (N-ACETYL-D-GLUCOSAMINE-6-P)!
    A list with 9 oligopeptides has been created!
    A list with 4186 polypeptides has been created!
    A list with 146 protein-complexes has been created!
    >>> len(db.other_nodes)
    123
    >>> db.oligopeptides[-1].uid
    'CPD0-1082'
    >>> db.complexes[-1].name
    'ribonuclease P'
    >>> poly = [p for p in db.polypeptides if p.name == 'efflux transporter']
    >>> poly[0].molecular_weight_kd
    11.325
    >>> len(db.edges)
    95650
    >>> len(set([i.uid for i in db.complexes]))
    146
    
17. let's check the work of the protein_features_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> db.rnas_dat()
    A list with 180 RNAs has been created!
    No genes in the database for 0 RNAs.
    >>> db.compounds_dat()
    A list with 901 compounds has been created!
    >>> db.proteins_dat()
    The complex with CPLX8J2-99 is assigned before its components (N-ACETYL-D-GLUCOSAMINE-6-P)!
    A list with 9 oligopeptides has been created!
    A list with 4186 polypeptides has been created!
    A list with 146 protein-complexes has been created!
    >>> e1 = len(db.edges)
    >>> db.protein_features_dat()
    A list with 15294 protein features has been created!
    >>> len(db.edges) - e1
    15294
    >>> datfile = _DatSet("protein-features.dat", path)
    >>> datfile.readfile()
    >>> len(datfile.names) == len(db.protfeatures)
    True
    
18. Let's try the sigma_factors method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> db.rnas_dat()
    A list with 180 RNAs has been created!
    No genes in the database for 0 RNAs.
    >>> db.compounds_dat()
    A list with 901 compounds has been created!
    >>> db.proteins_dat()
    The complex with CPLX8J2-99 is assigned before its components (N-ACETYL-D-GLUCOSAMINE-6-P)!
    A list with 9 oligopeptides has been created!
    A list with 4186 polypeptides has been created!
    A list with 146 protein-complexes has been created!
    >>> e1 = len(db.edges)
    >>> db.sigma_factors()
    20 Sigma-factors have been created!
    >>> len(db.edges) - e1
    20
    
19. Let's check work of the enzrxns_dat method

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> db.rnas_dat()
    A list with 180 RNAs has been created!
    No genes in the database for 0 RNAs.
    >>> db.compounds_dat()
    A list with 901 compounds has been created!
    >>> db.proteins_dat()
    The complex with CPLX8J2-99 is assigned before its components (N-ACETYL-D-GLUCOSAMINE-6-P)!
    A list with 9 oligopeptides has been created!
    A list with 4186 polypeptides has been created!
    A list with 146 protein-complexes has been created!
    >>> db.sigma_factors()
    20 Sigma-factors have been created!
    >>> sigmas = len(db.proteins)
    >>> db.enzrxns_dat()
    1244 enzymes have been created!
    >>> datfile = _DatSet("enzrxns.dat", path)
    >>> datfile.readfile()
    >>> len(datfile.names) == len(db.proteins) - sigmas
    True
    >>> db.proteins[-1].uid
    'ENZRXN8J2-1488'
    
20. Lets' check work of the regulation_dat method:

    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.genes_col()
    A list with 4366 genes has been created!
    >>> db.genes_dat()
    >>> db.rnas_dat()
    A list with 180 RNAs has been created!
    No genes in the database for 0 RNAs.
    >>> db.terminators_dat()
    A list with 1144 terminators has been created!
    >>> db.promoters_dat()
    A list with 605 promoters has been created!
    There were 565 unmapped elements, they were skipped...
    >>> db.compounds_dat()
    A list with 901 compounds has been created!
    >>> db.proteins_dat()
    The complex with CPLX8J2-99 is assigned before its components (N-ACETYL-D-GLUCOSAMINE-6-P)!
    A list with 9 oligopeptides has been created!
    A list with 4186 polypeptides has been created!
    A list with 146 protein-complexes has been created!
    >>> db.sigma_factors()
    20 Sigma-factors have been created!
    >>> db.dnabindsites_dat()
    A list with 522 BSs has been created!
    There were 232 unmapped BSs, they were skipped...
    >>> db.transunits_dat()
    A list with 1584 transcription units has been created!
    There were 427 incomplete transcription units...
    No information about 0 transcription units.
    >>> db.enzrxns_dat()
    1244 enzymes have been created!
    >>> db.regulation_dat()
    A list with 818 regulation events has been created!
    >>> db.regulation_events[-1].__class__.__name__
    'Transcription_Regulation'
    >>> db.regulation_events[-1].uid
    'REG8J2-721'
    
21. Let's try the reactions_dat method:

    >>> db.reactions_dat()
    A list with 1310 reactions has been created!
    There were 489 unknown components, nodes were created for them...
    >>> db.reactions[-1].uid
    'TRANS-RXN8J2-24'
    >>> db.reactions[-2].formula
    'NITRATE --> NITRATE'
    >>> reaction = [r for r in db.reactions if r.uid == 'UROGENDECARBOX-RXN'][0]
    >>> reaction.EC
    'EC-4.1.1.37'
    >>> reaction.formula
    'UROPORPHYRINOGEN-III + 4 PROTON --> COPROPORPHYRINOGEN_III + 4 CARBON-DIOXIDE'
    >>> reaction.type
    'Chemical-Reactions; Small-Molecule-Reactions'
    >>> reaction = [r for r in db.reactions if r.uid == 'TRANS-RXN-42'][0]
    >>> reaction.location
    'CCO-EXTRACELLULAR-CCO-IN'
    
22. Let's try the pathways_dat method:

    >>> db.pathways_dat()  
    A list with 289 pathways has been created!
    >>> db.pathways[-1].name
    'thiamin salvage II'
    >>> pathway = [p for p in db.pathways if p.uid == "GLUTORN-PWY"]
    >>> pathway[0].type
    'Other-Amino-Acid-Biosynthesis'
    >>> db.edges[-1].source.uid
    'PWY-6910'
    >>> db.edges[-1].label
    'PART_OF'
    
23. Let's check work of the pathways_col method:

    >>> db.pathways_col()
    >>> db.edges[-1].source.uid
    'BSU33090'
    >>> db.edges[-2].target.uid
    'PWY8J2-16'
    >>> db.edges[-2].label
    'ACTS_IN'
    
24. Let's check work of the protseq_fsa method:

    >>> db.protseq_fsa()
    >>> protein = [p for p in (db.polypeptides + db.oligopeptides) if p.uid == 'BSU40529-MONOMER'][0]
    >>> protein.seq
    'MWDMIKNFFLFSSGVLQATTLLLVILIFMYVRKTKKKNKESSGFMDDKH'
    
25. Let's check work of the transporters_col method:

    >>> db.transporters_col()
    46 protein-transporters have been created!
    >>> db.proteins[-1].name
    'H+-glucitol symporter'
    >>> db.edges[-1].label
    'IS_A'
    >>> db.edges[-2].source.uid
    'BSU39390-MONOMER'
    
26. Let's check the work of the extract_data method
    >>> path = './required for tests/'
    >>> db = MetaCyc(path)
    >>> db.extract_data()
    Information about version and release has been set!
    A list with 4366 genes has been created!
    A list with 180 RNAs has been created!
    No genes in the database for 0 RNAs.
    A list with 1144 terminators has been created!
    A list with 605 promoters has been created!
    There were 565 unmapped elements, they were skipped...
    A list with 522 BSs has been created!
    There were 232 unmapped BSs, they were skipped...
    A list with 1584 transcription units has been created!
    There were 427 incomplete transcription units...
    No information about 0 transcription units.
    A list with 901 compounds has been created!
    The complex with CPLX8J2-99 is assigned before its components (N-ACETYL-D-GLUCOSAMINE-6-P)!
    A list with 9 oligopeptides has been created!
    A list with 4186 polypeptides has been created!
    A list with 146 protein-complexes has been created!
    A list with 15294 protein features has been created!
    20 Sigma-factors have been created!
    1244 enzymes have been created!
    46 protein-transporters have been created!
    A list with 818 regulation events has been created!
    A list with 1310 reactions has been created!
    There were 489 unknown components, nodes were created for them...
    A list with 289 pathways has been created!
    
``_DatSet`` class
-------------------

1. Incorrect data type for the path argument:

    >>> path = 1
    >>> filename = 'genes.dat'
    >>> datfile = _DatSet(filename, path)
    Traceback (most recent call last):
    TypeError: The path argument must be a string!
    
2. Incorrect data type for the filename argument:

    >>> path = './required for tests/'
    >>> filename = []
    >>> datfile = _DatSet(filename, path)
    Traceback (most recent call last):
    TypeError: The filename argument must be a string!
    
3. Let's check correct representation of dat_object class:

    >>> filename = 'genes.dat'
    >>> datfile = _DatSet(filename, path)
    >>> datfile
    _DatSet constructed for genes.dat file
    >>> print datfile
    _DatSet constructed for genes.dat file
    
4. Let's check the readfile method:

    >>> datfile.readfile()
 
    >>> datfile.data != None
    True
    >>> len(datfile.data)
    4366
    >>> len(datfile.names)
    4366
    >>> datfile.data.keys()[0]
    'BSU09030'
    >>> datfile.data['BSU09030'].COMMON_NAME
    'yhcC'
    >>> len(datfile.data[datfile.data.keys()[0]].__dict__)
    10
    >>> datfile.data[datfile.data.keys()[0]].DBLINKS[0]
    {'DBnum': '3489409637', 'DB': 'GENOLIST', 'id': 'BSU09030'}
    >>> datfile.data[datfile.data.keys()[0]].__dict__
    {'COMMENT': 'Evidence 5: No homology to any previously reported sequences', 'RIGHT_END_POSITION': 980313, 'PRODUCT': 'BSU09030-MONOMER', 'CENTISOME_POSITION': '23.245508    ', 'LEFT_END_POSITION': 979939, 'TRANSCRIPTION_DIRECTION': '+', 'DBLINKS': [{'DBnum': '3489409637', 'DB': 'GENOLIST', 'id': 'BSU09030'}, {'DBnum': '3488906550', 'DB': 'STRING', 'id': 'BSU09030'}, {'DBnum': '3488807605', 'DB': 'SUBTILISWIKI', 'id': 'yhcC'}, {'DBnum': '3484502236', 'DB': 'DBTBS-GENES', 'id': 'yhcC'}, {'DBnum': '3474754563', 'DB': 'SUBTIWIKI', 'id': 'yhcC'}, {'DBnum': '3465237843', 'DB': 'GOA', 'id': 'P54587'}], 'COMPONENT_OF': 'CHROM-1-20; TU8J2-960', 'COMMON_NAME': 'yhcC', 'TYPES': 'ORFs'}

    
``_DatObject`` class
-------------------
    
1. Let's check the links_to_db method:
    
    >>> keys = datfile.names
    >>> datfile.data[keys[1]].links_to_db(2, db)
    Traceback (most recent call last):
    TypeError: The node argument must be of the Node class or derived classes!
    
2. Let's check the work of attr_check method:
    >>> filename = 'genes.dat'
    >>> datfile = _DatSet(filename, path)
    >>> datfile.readfile()
    >>> keys = datfile.names
    >>> obj = datfile.data[keys[0]]
    >>> obj.attr_check('SMTH')

    >>> obj.attr_check('RIGHT_END_POSITION')
    2544804
    >>> obj.attr_check('SMTH', 'output')
    'output'
    
3. Let's try the match_compartments() method:
    >>> path = './required for tests/'
    >>> datfile = _DatSet('reactions.dat', path)
    >>> datfile.readfile()
    >>> obj1 = datfile.data[datfile.names[0]]
    >>> obj2 = datfile.data[datfile.names[100]]
    >>> obj3 = datfile.data['RXN-12164']
    >>> obj4 = datfile.data['RXN8J2-39']
    >>> obj1.match_compartments()
    [('CCO-PM-BAC-POS', 'Cell wall', '3 PROTON'), ('CCO-PM-BAC-POS', 'Cell wall', 'WATER'), ('CCO-PM-BAC-POS', 'Cell wall', 'ATP'), ('CCO-PM-BAC-POS', 'Cell wall', '|Pi|'), ('CCO-PM-BAC-POS', 'Cell wall', 'ADP'), ('CCO-PM-BAC-POS', 'Cytosol', '4 PROTON')]
    >>> obj2.match_compartments()
    [('CCO-CYTOSOL', 'Cytosol', 'WATER'), ('CCO-CYTOSOL', 'Cytosol', 'MELIBIOSE'), ('CCO-CYTOSOL', 'Cytosol', 'ALPHA-D-GALACTOSE'), ('CCO-CYTOSOL', 'Cytosol', 'GLC')]
    >>> obj3.match_compartments()
    [('CCO-PM-BAC-POS', 'Cell wall', 'OXYGEN-MOLECULE'), ('CCO-PM-BAC-POS', 'Cell wall', '8 PROTON'), ('CCO-PM-BAC-POS', 'Cell wall', '2 WATER'), ('CCO-PM-BAC-POS', 'Cytosol', '8 PROTON'), ('UNKNOWN', 'Unknown', '2 |Menaquinols|'), ('UNKNOWN', 'Unknown', '2 |Menaquinones|')]
    >>> obj4.match_compartments()
    [('CCO-CE-BAC-POS', 'Cell envelope', 'MONOMER8J2-36'), ('CCO-CE-BAC-POS', 'Cell envelope', 'BSU05410-MONOMER'), ('CCO-CYTOSOL', 'Cytosol', 'BSU05420-MONOMER'), ('CCO-CYTOSOL', 'Cytosol', 'MONOMER8J2-37')]

``_Genes_Test`` class
-------------------
    
1. Incorrect geneslist arguments:
    
    >>> geneslist = 's'
    >>> test = _Genes_Test(geneslist)
    Traceback (most recent call last):
    TypeError: The geneslist must be a list!
    >>> g1 = Gene('gene1', 1, 100, 'forward')
    >>> g2 = Gene('gene2', 120, 300, 'forward')
    >>> g3 = Gene('gene3', 40000, 42500, 'forward')
    >>> g4 = Gene('gene4', 303, 400, 'reverse')
    >>> geneslist = [g1, g2, 's']
    >>> test = _Genes_Test(geneslist)
    Traceback (most recent call last):
    TypeError: The geneslist must contain only genes!
    >>> test = _Genes_Test([])
    Traceback (most recent call last):
    ValueError: The geneslist is empty!
    >>> test = _Genes_Test([g1])
    >>> test.strand
    'forward'
    >>> test.passed
    'Yes'
    
2. Genes have the same strand value and are closely located:

    >>> geneslist = [g1, g2]
    >>> test = _Genes_Test(geneslist)
    >>> test.strand
    'forward'
    >>> test.passed
    'Yes'

3. Genes have the same strand value and are not closely located:  

    >>> geneslist = [g1, g2, g3]
    >>> test = _Genes_Test(geneslist)
    >>> test.strand
    'forward'
    >>> test.passed
    'No'
    
4. Genes have different strands and are closely located:
    >>> geneslist = [g1, g4]
    >>> test = _Genes_Test(geneslist)
    >>> test.strand
    'unknown'
    >>> test.passed
    'Yes'

``LonelyNodesTest`` class
-------------------

1. Let's check work of the test class:

    >>> db2 = MetaCyc(path)
    >>> db2.genes = [g1, g2, g3, g3, g4]
    >>> db2.edges.append(m.CreateEdge(g1, g3))
    >>> test2 = LonelyNodesTest(db2)
    >>> test2.passed
    'No'
    >>> test = LonelyNodesTest(db)
    >>> test.passed
    'No'
    >>> db3 = MetaCyc(path)
    >>> db3.genes = [g1, g2]
    >>> db3.edges.append(m.CreateEdge(g1, g2))
    >>> test3 = LonelyNodesTest(db3)
    >>> test3.passed
    'Yes'
    
``DuplicateTest`` class
-------------------

1. Let's check work of the test class:

    >>> DuplicateTest(db3).passed
    'Yes'
    >>> DuplicateTest(db2).passed
    'No'
    >>> db3.edges.append(m.CreateEdge(g1, g2))
    >>> DuplicateTest(db3).passed
    'No'
  
